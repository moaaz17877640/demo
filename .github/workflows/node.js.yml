name: Node.js CI

# Trigger the workflow on push or pull request to the master branch
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    # Run on the latest Ubuntu runner
    runs-on: ubuntu-latest

    # Define a matrix strategy to test across multiple Node.js versions
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x] # Supported Node.js versions

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up the specified Node.js version and cache npm dependencies
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }} # Use the Node.js version from the matrix
          cache: 'npm' # Cache npm dependencies to speed up future runs
          cache-dependency-path: 'package-lock.json' # Specify the lock file for caching

      # Step 3: Install dependencies using `npm ci` for a clean, reproducible install
      - name: Install dependencies
        run: npm ci

      # Step 4: Run the build script (if present in package.json)
      - name: Build the project
        run: npm run build --if-present

      # Step 5: Run linting (if a lint script is defined in package.json)
      - name: Run linting
        run: npm run lint --if-present

      # Step 6: Run tests with environment variables (if needed)
      - name: Run tests
        run: npm test
        env:
          NODE_ENV: 'test' # Example environment variable for tests
          MY_ENV_VAR: 'value' # Add any other environment variables your tests require

      # (Optional) Step 7: Upload test results as artifacts (e.g., for CI reporting)
      - name: Upload test results
        if: always() # Upload artifacts even if tests fail
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            test-results/**/*.xml
            coverage/
